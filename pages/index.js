import { useState, useEffect } from 'react';
import Head from 'next/head';

import { Box } from '@chakra-ui/react';

import Header from '../components/Header';
import Container from '../components/Container';
import SignInModal from '../components/SignInModal';
import AddCompanyModal from '../components/AddCompanyModal';
import Footer from '../components/Footer';
import { useSupabase } from '../hooks/useSupabase.js';

export default function Home() {
  const [showSignIn, setShowSignIn] = useState(false);
  const [showAdd, setShowAdd] = useState(false);
  const [voteOptions, setVoteOptions] = useState([]);
  const [session, setSession] = useState();
  const [user, setUser] = useState();
  const [userVotes, setUserVotes] = useState();

  const supabase = useSupabase();

  async function submitOption(option) {
    const response = await supabase.from('options').insert({
      name: option.name,
      url: option.url,
      created_by: user.id,
    });

    if (response.data && response.data.length) {
      setVoteOptions([...voteOptions, response.data[0]]);
    }
    console.log(response);
  }

  function toggleAdd() {
    if (user || showAdd) {
      setShowAdd(!showAdd);
    } else {
      setShowSignIn(true);
    }
  }

  async function getOptions(user) {
    const { data: options, error } = await supabase
      .from('options')
      .select()
      .order('name', { ascending: true });
    console.log(options);
    setVoteOptions(options);

    if (user) {
      const { data: votes, error: votesError } = await supabase
        .from('votes')
        .select('option_id')
        .eq('user_id', user.id);

      setUserVotes(votes);

      if (votesError) {
        console.error(votesError);
      }
    }
  }

  console.log('userVotes', userVotes);

  useEffect(() => {
    getOptions(user);
  }, [user]);

  const Toggle = async (id, selected, setSelected) => {
    if (!user) {
      setShowSignIn(!showSignIn);
      return;
    }

    if (user) {
      if (selected === false) {
        setSelected(true);

        const { data: options, error: optionsError } = await supabase
          .from('options')
          .select('id, name, votes')
          .eq('id', id);

        if (optionsError) {
          console.log(optionsError);
        }

        const {
          id: optionId,
          name: optionName,
          votes: optionVotes,
        } = options[0];

        optionVotes++;

        const { data, error } = await supabase
          .from('options')
          .update({ votes: optionVotes })
          .eq('id', id);

        if (error) {
          console.log(error);
        }

        getOptions();

        //Store vode in supabase profiles table and
        const { data: votes, error: profilesError } = await supabase
          .from('votes')
          .insert([
            {
              user_id: user.id,
              // user_email: user.email,
              option_id: optionId,
            },
          ]);
      }
    }
  };
  async function signInWithGithub() {
    await supabase.auth.signIn({
      provider: 'github',
    });
  }

  async function signInWithGoogle() {
    await supabase.auth.signIn({
      provider: 'google',
    });
  }

  async function handleSignOut() {
    let { error } = await supabase.auth.signOut();

    location.reload();

    if (error) {
      console.log(error);
    }
  }

  console.log('user', user);
  // Add auth for twitter when live
  // async function signInWithTwitter() {
  //   await supabase.auth.signIn({
  //     provider: "twitter",
  //   });
  // }
  useEffect(() => {
    setSession(supabase.auth.session());

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      setUser(session.user);
      supabase
        .from('profiles')
        .upsert({
          id: session.user.id,
          email: session.user.email,
        })
        .then((res) => console.log(res));
    });
  }, []);

  return (
    <Box w="100vw" h="100vh" position="relative">
      <Head>
        <title>CMD k Leaderboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header user={user} session={session} handleSignOut={handleSignOut} />

      <Box
        width="100%"
        h="80vh"
        display="flex"
        justifyContent="center"
        as="main"
      >
        <Container
          options={voteOptions}
          Toggle={Toggle}
          toggleAdd={toggleAdd}
          submitOption={submitOption}
          userVotes={userVotes}
        />

        <SignInModal
          show={showSignIn}
          title="My Modal"
          Toggle={Toggle}
          signInWithGithub={signInWithGithub}
          signInWithGoogle={signInWithGoogle}
        />
        <AddCompanyModal
          show={showAdd}
          Toggle={toggleAdd}
          submitOption={submitOption}
        />
      </Box>
      <Footer />
    </Box>
  );
}
